{"version":3,"file":"static/js/440.1e29b9fd.chunk.js","mappings":"8JAEAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAEXD,EAAAA,EAAAA,SAAAA,QAAyB,gCA6BzB,MACA,EADY,IA3BZ,MACEE,oBACE,MAAM,KAAEC,SAAeH,EAAAA,EAAAA,IAAU,sBACjC,OAAOG,EAAKC,OACd,CAEAF,mBAAmBG,GACjB,MAAM,KAAEF,SAAeH,EAAAA,EAAAA,IAAU,gBAADM,OAAiBD,IACjD,OAAOF,CACT,CAEAD,sBAAsBK,GACpB,MAAM,KAAEJ,SAAeH,EAAAA,EAAAA,IAAU,SAADM,OAAUC,IAC1C,OAAOJ,CACT,CAEAD,mBAAmBK,GACjB,MAAM,KAAEJ,SAAeH,EAAAA,EAAAA,IAAU,SAADM,OAAUC,EAAO,aACjD,OAAOJ,CACT,CAEAD,sBAAsBK,GACpB,MAAM,KAAEJ,SAAeH,EAAAA,EAAAA,IAAU,SAADM,OAAUC,EAAO,aACjD,OAAOJ,CACT,E,iGC7BF,MAAMK,E,OAAcC,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qE,aCI7B,MA4CA,EA5CgBC,KACd,MAAM,QAAEL,IAAYM,EAAAA,EAAAA,OACd,UAAEC,EAAS,aAAEC,EAAY,MAAEC,EAAK,SAAEC,IAAaC,EAAAA,EAAAA,MAC9CC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IAkBvC,OAhBAC,EAAAA,EAAAA,YAAU,KACWpB,WACjBa,GAAa,GACbE,GAAS,GACT,IACE,MAAQb,QAASe,SAAkBI,EAAAA,EAAAA,gBAAoBhB,GACvDa,EAAWD,EAKb,CAJE,OAAO,QAAEK,IACTP,EAASO,EACX,CAAC,QACCT,GAAa,EACf,GAEFU,EAAY,GACX,CAAClB,EAASU,EAAUF,KAGrBW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACHd,GACCe,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eACDZ,GACFa,EAAAA,EAAAA,KAAA,KAAAD,SAAIZ,IAEJG,EAAQW,OAAS,IACfD,EAAAA,EAAAA,KAACrB,EAAW,CAAAoB,SACTT,EAAQY,KAAIC,IAAA,IAAC,GAAEC,EAAE,OAAEC,EAAM,QAAEC,GAASH,EAAA,OACnCN,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,WAASM,MACZR,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,YAAUO,OAFNF,EAGJ,QAKZ,C,8CC5CP,MAMA,EANmBf,KACjB,MAAOJ,EAAWC,IAAgBM,EAAAA,EAAAA,WAAS,IACpCL,EAAOC,IAAYI,EAAAA,EAAAA,UAAS,MACnC,MAAO,CAAEP,YAAWC,eAAcC,QAAOC,WAAU,C","sources":["api/api.js","components/Reviews/reviews.styled.js","components/Reviews/index.jsx","hooks/useRequest.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.params = {\n  api_key: 'ac8fbb226a37f835673d1586bcf6a4c6',\n};\naxios.defaults.baseURL = 'https://api.themoviedb.orgg/3';\n\nclass Api {\n  async getTrending() {\n    const { data } = await axios.get('trending/movie/day');\n    return data.results;\n  }\n\n  async searchMovies(query) {\n    const { data } = await axios.get(`search/movie?${query}`);\n    return data;\n  }\n\n  async getMovieDetails(movieId) {\n    const { data } = await axios.get(`movie/${movieId}`);\n    return data;\n  }\n\n  async getMovieCast(movieId) {\n    const { data } = await axios.get(`movie/${movieId}/credits`);\n    return data;\n  }\n\n  async getMovieReviews(movieId) {\n    const { data } = await axios.get(`movie/${movieId}/reviews`);\n    return data;\n  }\n}\n\nconst api = new Api();\nexport default api;\n","import styled from 'styled-components';\n\nconst ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport { ReviewsList };\n","import api from 'api/api';\nimport useRequest from 'hooks/useRequest';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewsList } from './reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const { isLoading, setIsLoading, error, setError } = useRequest();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      setIsLoading(true);\n      setError(false);\n      try {\n        const { results: reviews } = await api.getMovieReviews(movieId);\n        setReviews(reviews);\n      } catch ({ message }) {\n        setError(message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId, setError, setIsLoading]);\n\n  return (\n    <>\n      <h4>Reviews</h4>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        reviews.length > 0 && (\n          <ReviewsList>\n            {reviews.map(({ id, author, content }) => (\n              <li key={id}>\n                <p>Author: {author}</p>\n                <p>Comment: {content}</p>\n              </li>\n            ))}\n          </ReviewsList>\n        )\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import { useState } from 'react';\n\nconst useRequest = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  return { isLoading, setIsLoading, error, setError };\n};\n\nexport default useRequest;\n"],"names":["axios","api_key","async","data","results","query","concat","movieId","ReviewsList","styled","_templateObject","_taggedTemplateLiteral","Reviews","useParams","isLoading","setIsLoading","error","setError","useRequest","reviews","setReviews","useState","useEffect","api","message","getReviews","_jsxs","_Fragment","children","_jsx","length","map","_ref","id","author","content"],"sourceRoot":""}